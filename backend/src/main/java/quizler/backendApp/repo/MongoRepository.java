package quizler.backendApp.repo;

import java.util.List;
import java.util.UUID;

import org.bson.Document;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.AggregationResults;
import org.springframework.data.mongodb.core.aggregation.MatchOperation;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.stereotype.Repository;

import com.mongodb.client.result.DeleteResult;

@Repository
public class MongoRepository {

    @Autowired
    private MongoTemplate mt;

    // USER DATA: "users"

    // DOCUMENT/ S3 FILES DATA: "s3files"
    public void saveDocument(String userId, String title, String s3Id, String extractedText) {
        Document doc = new Document();
        doc.put("userId", userId);
        doc.put("title", title);
        doc.put("S3Id", s3Id);
        doc.put("extractedText", extractedText);

        mt.insert(doc, "s3files");
    }

    public List<Document> getAllDocuments(String userId) {
        MatchOperation matchOps = Aggregation.match(Criteria.where("userId").is(userId));
        Aggregation pipeline = Aggregation.newAggregation(matchOps);
        AggregationResults<Document> results = mt.aggregate(pipeline, "s3files", Document.class);

        return results.getMappedResults();
    }

    public Document getDocument(String docId) {
        MatchOperation matchOps = Aggregation.match(Criteria.where("S3Id").is(docId));
        Aggregation pipeline = Aggregation.newAggregation(matchOps);
        AggregationResults<Document> results = mt.aggregate(pipeline, "s3files", Document.class);

        return results.getMappedResults().getFirst();
    }

    // delete document data
    public Boolean deleteDocument(String docId) {
        Query query = Query.query(Criteria.where("S3Id").is(docId));
        DeleteResult deleteResult = mt.remove(query, "s3files");
        System.out.printf("\n\ndeleting docId: %s\n\ndeletecount: %s\n\n", docId, deleteResult.getDeletedCount());
        return (deleteResult.getDeletedCount() == 1);
    }

    // QUIZ DATA: "quiz"
    // Returns quizId generated by Mongo
    public String saveQuiz(Document quizDoc) {
        quizDoc.put("quizId", UUID.randomUUID().toString());
        Document insertedDoc = mt.insert(quizDoc, "quiz");
        return insertedDoc.getString("quizId");
    }

    public Document getQuiz(String quizId, String typeBase) {
        MatchOperation matchOps = Aggregation.match(Criteria.where("quizId").is(quizId));

        Aggregation pipeline = Aggregation.newAggregation(matchOps);

        AggregationResults<Document> results;

        results = mt.aggregate(pipeline, "quiz", Document.class);

        return results.getMappedResults().getFirst();
    }

    // Delete one quiz
    public Boolean deleteQuiz(String quizId) {
        Query query = Query.query(Criteria.where("quizId").is(quizId));
        DeleteResult result = mt.remove(query, "quiz");
        System.out.printf("\n\ndeleting quizId: %s\n\ndeletecount: %s\n\n", quizId, result.getDeletedCount());
        return (result.getDeletedCount() == 1);
    }

    // Delete all quizzes under a document
    public Boolean deleteQuizzesOfADocument(String docId) {
        Query query = Query.query(Criteria.where("documentId").is(docId));
        List<Document> listOfQuizAttempts = mt.find(query, Document.class, "quiz");
        DeleteResult result = mt.remove(query, "quiz");
        System.out.printf("\n\ndeleting quizzes of a document: %s\n\ndeletecount: %s\n\n", docId, (int) result.getDeletedCount());
        return ((int) result.getDeletedCount() == listOfQuizAttempts.size());
    } 

    // Get all quizzes under a document
    public List<Document> getAllQuizzes(String docId) {
        MatchOperation matchOps = Aggregation.match(Criteria.where("documentId").is(docId));
        Aggregation pipeline = Aggregation.newAggregation(matchOps);
        AggregationResults<Document> results = mt.aggregate(pipeline, "quiz", Document.class);

        return results.getMappedResults();
    }

    // Get all quizzes under a document
    public List<Document> getAllTopicGeneratedQuizzes(String userId) {
        MatchOperation matchOps = Aggregation.match(Criteria.where("userId").is(userId).and("type").is("topicBased"));
        Aggregation pipeline = Aggregation.newAggregation(matchOps);
        AggregationResults<Document> results = mt.aggregate(pipeline, "quiz", Document.class);

        return results.getMappedResults();
    }

    // ------- SCORES DATA: "scores" -------
    // Returns Quiz Attempt ID generated by Mongo
    public String saveQuizAttempt(Document quizAttemptDoc) {
        quizAttemptDoc.put("attemptId", UUID.randomUUID().toString());
        Document insertedDoc = mt.insert(quizAttemptDoc, "attempts");
        return insertedDoc.getString("attemptId");
    }

    // Retrives All Quiz Attempts
    public List<Document> getAllAttempts(String quizId) {
        MatchOperation matchOps = Aggregation.match(Criteria.where("quizId").is(quizId));
        Aggregation pipeline = Aggregation.newAggregation(matchOps);
        AggregationResults<Document> results = mt.aggregate(pipeline, "attempts", Document.class);

        return results.getMappedResults();
    }

    // Retrieves Quiz Attempt
    public Document getQuizAttempt(String attemptId) {
        MatchOperation matchOps = Aggregation.match(Criteria.where("attemptId").is(attemptId));
        Aggregation pipeline = Aggregation.newAggregation(matchOps);
        AggregationResults<Document> results = mt.aggregate(pipeline, "attempts", Document.class);
        // System.out.printf("mongo repo -- get quiz attempt: %s\n\n", results.getMappedResults());
        return results.getMappedResults().getFirst();
    }

    // Delete all attempts under a quiz OR a document (only when a quiz/document is deleted, users are not able to delete attempts on their own)
    public Boolean deleteQuizAttempts(String id, String quizOrDoc) {

        Query query;
        if (quizOrDoc == "quiz") {
            query = Query.query(Criteria.where("quizId").is(id));
        } else {
            query = Query.query(Criteria.where("documentId").is(id));
        }
        
        List<Document> listOfQuizAttempts = mt.find(query, Document.class, "attempts");
        DeleteResult result = mt.remove(query, "attempts");
        System.out.printf("\n\ndeleting quiz attempts: %s\n\ndeletecount: %s\n\n", id, (int) result.getDeletedCount());
        return ((int) result.getDeletedCount() == listOfQuizAttempts.size());
    } 

}
